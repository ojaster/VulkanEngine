////
////  bugTestMain.cpp
////  FIrst_Project
////
////  Created by Данил on 27.9.2021.
////  Copyright © 2021 Daniil. All rights reserved.
////
//
//#include <stdio.h>
//#include "initImGui.hpp"
//#include "physics.hpp"
//int map[100][100]{
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,
//    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,
//    12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,
//    13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,
//    13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
//    13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
//    13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
//    13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
//    13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
//    13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,
//    14,14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,
//    14,14,14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,
//    14,14,14,14,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
//    14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
//    14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
//    14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
//    14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,8,8,
//    14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,8,8,8,
//    14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,8,8,8,8,
//    8,8,8,14,14,8,8,8,8,8,8,8,8,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,8,8,8,8,8,
//    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,8,8,8,8,8,8,8,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,8,8,8,8,14,14,14,14,14,14,14,14,14,14,8,8,8,8,8,8,
//    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,14,14,14,14,14,14,14,14,14,14,14,14,14,14,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,14,14,14,14,14,8,8,8,8,8,8,8,8,8,8,
//    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,14,14,14,14,14,14,14,14,14,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
//    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
//    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
//    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
//    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
//    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,
//    9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,
//    9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
//    9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
//    9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
//    9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
//    9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
//    9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
//    9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
//    9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
//    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
//    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,
//    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,
//    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
//    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
//    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
//    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
//    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
//    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
//    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
//    10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,14,11,11,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,12,12,12,12,12,14,11,11,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,12,15,1,15,1,15,1,12,12,14,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,15,1,16,1,15,16,16,17,1,12,
//    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,17,1,17,1,16,17,17,1,15,17,1};
//static std::vector<const char*> validationLayers = {
//    "VK_LAYER_KHRONOS_validation"
//};
//
//static std::vector<const char*> deviceExtensions = {
//    VK_KHR_SWAPCHAIN_EXTENSION_NAME
//};
//void createGraphicsPipeline(initVulkanH *vulkan){
//    infoForViews info = vulkan->getInfo();
//    VkDevice &logicalDevice = vulkan->getDevice();
//    auto vertShader = readFile("shaders/playingAround/triangleVert.spv");
//    auto fragShader = readFile("shaders/triangleFrag.spv");
//
//    VkShaderModule vert;
//    VkShaderModuleCreateInfo vertInfo = {};
//    vertInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
//    vertInfo.codeSize = static_cast<uint32_t>(vertShader.size());
//    vertInfo.pCode = reinterpret_cast<uint32_t *>(vertShader.data());
//    if(vkCreateShaderModule(logicalDevice, &vertInfo, nullptr, &vert) != VK_SUCCESS){
//        throw std::runtime_error("failed to create shader module");
//    }
//
//    VkShaderModule frag;
//    VkShaderModuleCreateInfo fragInfo = {};
//    fragInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
//    fragInfo.codeSize = static_cast<uint32_t>(fragShader.size());
//    fragInfo.pCode = reinterpret_cast<uint32_t *>(fragShader.data());
//    if(vkCreateShaderModule(logicalDevice, &fragInfo, nullptr, &frag) != VK_SUCCESS){
//        throw std::runtime_error("failed to create shader module");
//    }
//
//
//    auto bindingDescription = Vertex2::getBindingDescription();
//    auto attributeDescriptions = Vertex2::getAttributeDescriptions();
//
//    VkPipelineVertexInputStateCreateInfo vertCreateInfo = {};
//    //createVertexInput(vertCreateInfo);
//    vertCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
//    vertCreateInfo.vertexBindingDescriptionCount = 1;
//    vertCreateInfo.vertexAttributeDescriptionCount = static_cast<uint32_t>(attributeDescriptions.size());
//    vertCreateInfo.pVertexBindingDescriptions = &bindingDescription;
//    vertCreateInfo.pVertexAttributeDescriptions = attributeDescriptions.data();
//
//    VkPipelineInputAssemblyStateCreateInfo assemblyCreateInfo = {};
//    //createAssemblyInput(assemblyCreateInfo);
//    assemblyCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
//    assemblyCreateInfo.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
//    assemblyCreateInfo.primitiveRestartEnable = VK_FALSE;
//
//    VkViewport viewPort = {};
//    VkRect2D scissor = {};
//    VkPipelineViewportStateCreateInfo viewPortCreateInfo = {};
//    //createViewPort(viewPortCreateInfo, info,viewPort,scissor);
//    viewPortCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
//    viewPort.x = 0;
//    viewPort.y = 0;
//    viewPort.width = info.extent.width;
//    viewPort.height = info.extent.height;
//    viewPort.minDepth = 0;
//    viewPort.maxDepth = 1;
//
//    scissor.offset = {0,0};
//    scissor.extent = info.extent;
//
//    viewPortCreateInfo.viewportCount = 1;
//    viewPortCreateInfo.pViewports = &viewPort;
//    viewPortCreateInfo.scissorCount = 1;
//    viewPortCreateInfo.pScissors = &scissor;
//
//
//    VkPipelineRasterizationStateCreateInfo rasterizationCreateInfo = {};
//    //createRasterization(rasterizationCreateInfo);
//    rasterizationCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
//    rasterizationCreateInfo.depthClampEnable = VK_FALSE;
//    rasterizationCreateInfo.rasterizerDiscardEnable = VK_FALSE;// only false if multi sampling on
//    rasterizationCreateInfo.polygonMode = VK_POLYGON_MODE_FILL;
//    rasterizationCreateInfo.cullMode = VK_CULL_MODE_BACK_BIT;
//    rasterizationCreateInfo.frontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE;
//    rasterizationCreateInfo.depthBiasEnable = VK_FALSE;
//    rasterizationCreateInfo.lineWidth = 1.0f;
//
//    VkPipelineColorBlendStateCreateInfo colorBlendCreateInfo = {};
//    //createColorBlend(colorBlendCreateInfo);
//    colorBlendCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
//    colorBlendCreateInfo.logicOpEnable = VK_FALSE;
//    colorBlendCreateInfo.attachmentCount = 1;
//    colorBlendCreateInfo.logicOp = VK_LOGIC_OP_COPY;
//
//    VkPipelineColorBlendAttachmentState colorBlendAttachment{};
//       colorBlendAttachment.colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT |  VK_COLOR_COMPONENT_A_BIT;
//       colorBlendAttachment.blendEnable = VK_TRUE;
//       colorBlendAttachment.srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA;
//       colorBlendAttachment.dstColorBlendFactor =  VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
//       colorBlendAttachment.colorBlendOp = VK_BLEND_OP_ADD;
//       colorBlendAttachment.srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE;
//       colorBlendAttachment.dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO;
//       colorBlendAttachment.alphaBlendOp = VK_BLEND_OP_ADD;
//
//    colorBlendCreateInfo.pAttachments = &colorBlendAttachment;
//
//  //  createPipelineLayout(layout,logicalDevice);
//    VkPipelineLayoutCreateInfo layoutCreateInfo = {};
//    layoutCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
//    layoutCreateInfo.setLayoutCount = 1;
//    layoutCreateInfo.pSetLayouts = &vulkan->getSetLayout();
//    if(vkCreatePipelineLayout(logicalDevice, &layoutCreateInfo, nullptr, &vulkan->getLayout()) != VK_SUCCESS){
//        throw std::runtime_error("failed to create pipline layout");
//    }
//
//    VkPipelineShaderStageCreateInfo vertStage = {};
//    vertStage.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
//    vertStage.stage = VK_SHADER_STAGE_VERTEX_BIT;
//    vertStage.module = vert;
//    vertStage.pName = "main";
//
//    VkPipelineShaderStageCreateInfo fragStage = {};
//    fragStage.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
//    fragStage.stage = VK_SHADER_STAGE_FRAGMENT_BIT;
//    fragStage.module = frag;
//    fragStage.pName = "main";
//
//    VkPipelineShaderStageCreateInfo stages[2] = {vertStage,fragStage};
//
//            VkPipelineMultisampleStateCreateInfo multisampling{};
//            multisampling.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
//            multisampling.sampleShadingEnable = VK_FALSE;
//            multisampling.rasterizationSamples = VK_SAMPLE_COUNT_1_BIT;
//    
//    
//    VkPipelineDepthStencilStateCreateInfo depthStencil{};
//    depthStencil.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
//    depthStencil.depthTestEnable = VK_TRUE;
//    depthStencil.depthWriteEnable = VK_TRUE;
//    depthStencil.depthCompareOp = VK_COMPARE_OP_LESS;
//    
//    depthStencil.depthBoundsTestEnable = VK_FALSE;
//    depthStencil.minDepthBounds = 0.0f; // Optional
//    depthStencil.maxDepthBounds = 1.0f; // Optional
//    
//    depthStencil.stencilTestEnable = VK_FALSE;
//    depthStencil.front = {}; // Optional
//    depthStencil.back = {}; // Optional
//
//    VkGraphicsPipelineCreateInfo createInfo = {};
//    createInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
//    createInfo.stageCount = 2;
//    createInfo.pStages = stages;
//    createInfo.pVertexInputState = &vertCreateInfo;
//    createInfo.pInputAssemblyState = &assemblyCreateInfo;
//    createInfo.pViewportState = &viewPortCreateInfo;
//    createInfo.pRasterizationState = &rasterizationCreateInfo;
//    createInfo.pColorBlendState = &colorBlendCreateInfo;
//    createInfo.pMultisampleState = &multisampling;
//    createInfo.layout = vulkan->getLayout();
//    createInfo.renderPass = vulkan->getRenderPass();
//    createInfo.subpass = 0;//.
//    createInfo.basePipelineHandle = VK_NULL_HANDLE;//
//    createInfo.pDepthStencilState = &depthStencil;
//
//    if(vkCreateGraphicsPipelines(logicalDevice, nullptr, 1, &createInfo, nullptr, &vulkan->getPipeline()) != VK_SUCCESS){
//        throw std::runtime_error("failed to create graphics pipeline");
//    }
//    vkDestroyShaderModule(logicalDevice, vert, nullptr);
//    vkDestroyShaderModule(logicalDevice, frag, nullptr);
//}
//
//void createDescriptorSetLayout(initVulkanH *vulkan){
//    VkDescriptorSetLayoutBinding setLayout = {};
//    setLayout.binding = 0;
//    setLayout.descriptorCount = 1;
//    setLayout.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
//    setLayout.stageFlags = VK_SHADER_STAGE_VERTEX_BIT;
//
//    VkDescriptorSetLayoutBinding samplerLayoutBinding{};
//    samplerLayoutBinding.binding = 1;
//    samplerLayoutBinding.descriptorCount = 1;
//    samplerLayoutBinding.descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
//    samplerLayoutBinding.pImmutableSamplers = nullptr;
//    samplerLayoutBinding.stageFlags = VK_SHADER_STAGE_FRAGMENT_BIT;
//
//    std::vector<VkDescriptorSetLayoutBinding> bindings = {setLayout,samplerLayoutBinding};
//
//    VkDescriptorSetLayoutCreateInfo createInfo = {};
//    createInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
//    createInfo.bindingCount = static_cast<uint32_t>(bindings.size());
//    createInfo.pBindings = bindings.data();
//
//
//    if(vkCreateDescriptorSetLayout(vulkan->getDevice(), &createInfo, nullptr, &vulkan->getSetLayout()) != VK_SUCCESS){
//        throw std::runtime_error("failed to create descriptor set layout");
//    }
//}
//void beginCommandBuffers(ObjT &spinningStuff, initVulkanH &vulkan,std::vector<VkCommandBuffer> &commandBuffers,ObjT &b){
//    for(int i = 0; i<commandBuffers.size(); i++){
//        VkCommandBufferBeginInfo beginInfo = {};
//        beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
//        if(vkBeginCommandBuffer(commandBuffers[i], &beginInfo) != VK_SUCCESS){
//            throw std::runtime_error("failed to begin command buffers");
//        }
//        recordCommands(vulkan.getRenderPass(), vulkan.getFrameBuffers()[i], vulkan.getInfo(), commandBuffers[i]);
//        vkCmdBindPipeline(commandBuffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, vulkan.getPipeline());
//        recordObj(spinningStuff.vertexBuffer, spinningStuff.indexBuffer, spinningStuff.descSets[i], spinningStuff.layout, commandBuffers[i]);
//        recordObj(b.vertexBuffer, b.indexBuffer, b.descSets[i], b.layout, commandBuffers[i]);
//
//        vkCmdEndRenderPass(commandBuffers[i]);
//        if(vkEndCommandBuffer(commandBuffers[i]) != VK_SUCCESS){
//            throw std::runtime_error("failed to end command buffers");
//        }
//    }
//}
//void beginCommandBuffersGui(std::vector<ObjT> &spinningStuff, initVulkanH *vulkan,VkCommandBuffer &commandBuffers,uint32_t &frameIndex){
//    VkCommandBufferBeginInfo beginInfo = {};
//    beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
//    vkCmdBindPipeline(commandBuffers, VK_PIPELINE_BIND_POINT_GRAPHICS, vulkan->getPipeline());
//    for(int i = 0; i<spinningStuff.size(); i++){
//        recordObj(spinningStuff[i].vertexBuffer, spinningStuff[i].indexBuffer, spinningStuff[i].descSets[frameIndex], spinningStuff[i].layout, commandBuffers);
//    }
//}
//void applyUniformBuffer(std::vector<ObjT> &obj,uint32_t &currentImage,initVulkanH &vulkan,std::vector<UniformBufferObject> &uboh){
//    for(int i = 0; i<obj.size(); i++){
//        UniformBufferObject ubo{};
//        ubo.model = uboh[i].model;
//        ubo.view = uboh[i].view;
//        ubo.proj = uboh[i].proj;
//
//        void *data;
//        vmaMapMemory(vulkan.getAllocator(), obj[i].uniformBufferMem[currentImage], &data);
//            memcpy(data, &ubo, sizeof(ubo));
//        vmaUnmapMemory(vulkan.getAllocator(), obj[i].uniformBufferMem[currentImage]);
//    }
//}
//glm::mat4 viewMatrixx(glm::lookAt(glm::vec3(0.0f, 0.0f, 2.0f), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f)));
//glm::mat4 perspectiveMatrixx;
//void updateUniformBuffer(std::vector<ObjT> &obj,uint32_t &currentImage,float degree,initVulkanH &vulkan,UniformBufferObject &ubo){
////    static float time = 1;
//    static auto startTime = std::chrono::high_resolution_clock::now();
//
//    auto currentTime = std::chrono::high_resolution_clock::now();
//    float time = std::chrono::duration<float, std::chrono::seconds::period>(currentTime - startTime).count();
////    time += 1;
//
//    ubo.model = glm::rotate(glm::mat4(1.0f), time * glm::radians(degree), glm::vec3(0.0f, 0.0f, 1.0f));
//    ubo.view = glm::lookAt(glm::vec3(2.0f, 2.0f, 2.0f), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 0.0f, 1.0f));
//    ubo.proj = glm::perspective(glm::radians(45.0f), vulkan.getInfo().extent.width / (float) vulkan.getInfo().extent.height, 0.1f, 10.0f);
//    ubo.proj[1][1] *= -1;
//}
//void updateUniformBufferMap(UniformBufferObject &ubo,initVulkanH &vulkan){
//    
//    static float f = 0;
////    static bool dir = true;
////    if(dir){
////        f+=0.01;
////    }else{
////        f-=0.01;
////    }
////    if(f >= 1.f){
////        dir = false;
////    }else if(f <= -5.f){
////        dir = true;
////    }
////    std::cout<<f<<std::endl;
//    ubo.model = glm::transpose(glm::mat4(1,0,0,0,
//                          0,1,0,0,
//                          0,0,1,f,
//                          0,0,0,1));
//    ubo.view = viewMatrixx;
//    ubo.proj = glm::perspective(glm::radians(45.0f), vulkan.getInfo().extent.width / (float) vulkan.getInfo().extent.height, 0.1f, 10.0f);
//    ubo.proj[1][1] *= -1;
//}
//void createMapFromTmx(int map[100][100],infoForViews &info,std::vector<textureObj> &objectsTex,std::vector<ObjT> &returnObj,int *indices){//should change should be in helper function and here it should be specifically optimised for any game
//    glm::vec3 black(0.f,0.f,0.f);
//    glm::vec3 white(1.f,1.f,1.f);
//    glm::vec3 green(0.f,1.f,0.f);
//    glm::vec3 red(1.f,0.f,0.f);
//    glm::vec3 blue(0.f,0.f,1.f);
//
//    uint32_t WIDTH = info.extent.width;
//    uint32_t HEIGHT = info.extent.height;
//
//    
//    std::vector<Vertex> tmp2(2);
//    tmp2[0].color = green;
//    tmp2[1].color = green;
//    float tileMapWidth = WIDTH/100.f;
//    float tileMapHeight = HEIGHT/100.f;
//
//    
//    float depth = 0.f;
//    ObjT temporary; // one object at a time
//    temporary.vertices.resize(4);
//    for(int i = 0; i<4; i++){
//        temporary.vertices[i].pos.z = depth;
//        temporary.vertices[i].color = black;
//    }
//
//    for(int i = 0; i<100; i++){//height
//        for(int j = 0; j<8; j++){//width
//                float packManX = j*tileMapWidth;
//                float packManY = i*tileMapHeight;
//                temporary.vertices[0].pos = {deviceToNormalized(packManX,WIDTH),-deviceToNormalized(packManY,HEIGHT),depth};
//
//                temporary.vertices[1].pos.x = deviceToNormalized(packManX + tileMapWidth,WIDTH);
//                temporary.vertices[1].pos.y = -deviceToNormalized(packManY,HEIGHT);// top right
//
//                temporary.vertices[2].pos.x = deviceToNormalized(packManX + tileMapWidth, WIDTH);
//                temporary.vertices[2].pos.y = -deviceToNormalized(packManY+tileMapHeight, HEIGHT); // bottom right
//
//                temporary.vertices[3].pos.x = deviceToNormalized(packManX,WIDTH);
//                temporary.vertices[3].pos.y = -deviceToNormalized(packManY+tileMapHeight, HEIGHT); // bottom left
//                texPosVert(temporary.vertices, objectsTex[map[i][j]-1]);
//                returnObj.push_back(temporary);
//
//        }
//    }
//    
//}
//int main(){// this app proves that the window bug 27.9.2021 video was resulted because of the packman app//28.9.2021 no it doesn't prove, it is the apis problem
//    /*{{{-1.0f, -0.5f,0.f}, {1.0f, 0.0f, 0.0f}, {1.f,0.f}},{{-0.5f, -0.5f,0.f}, {0.0f, 1.0f, 1.0f},  {0.f,0.f}},{{-0.5f, 0.0f,0.f}, {0.0f, 0.0f, 1.0f},  {0.f,1.f}},{{-1.0f, 0.0f,0.f}, {0.7f, 1.0f, 0.3f},  {1.f,1.f}}};*/
//    glm::vec3 black = {1.f,1.f,1.f};
//    float depth = 0.f;
//    std::vector<Vertex2> vertices(4);
//    vertices[0].copy({{-1.0f, -0.5f,depth}, {1.0f, 0.0f, 0.0f}, {1.f,0.f}});
//    vertices[1].copy({{-0.5f, -0.5f,depth}, {0.0f, 1.0f, 1.0f},  {0.f,0.f}});
//    vertices[2].copy({{-0.5f, 0.0f,depth}, {0.0f, 0.0f, 1.0f},  {0.f,1.f}});
//    vertices[3].copy({{-1.0f, 0.0f,depth}, {0.7f, 1.0f, 0.3f},  {1.f,1.f}});
//    
//    std::vector<Vertex2> verticesBack(4);
//    verticesBack[0].copy({{-1.0f, -1.f,depth}, {1.0f, 0.0f, 0.0f}, {0.f,0.f}});
//    verticesBack[1].copy({{1.f, -1.f,depth}, {0.0f, 1.0f, 1.0f},  {1.f,0.f}});
//    verticesBack[2].copy({{1.f, 1.f,depth}, {0.0f, 0.0f, 1.0f},  {1.f,1.f}});
//    verticesBack[3].copy({{-1.f, 1.f,depth}, {0.7f, 1.0f, 0.3f},  {0.f,1.f}});
//    
////    , {1.f,0.f}
////    ,  {1.f,1.f}
////    textureObj texObj;
////    texObj.intialize({1.f,0.f}, {1.f,1.f});
//
//    uint32_t imageIndex = 0;
//    VkResult recreate;
//    ObjT spinStuff(vertices,"textures/texture.jpg");
//    float lastTime = glfwGetTime();
//    float fps = 60;
////    GuiB dearGui;
//    // Initialize styles, keys, etc.
////    void init(float width, float height);
//
//    // Initialize all Vulkan resources used by the ui
////    void initResources(VkRenderPass renderPass, VkQueue copyQueue, const std::string& shadersPath);
//
//    // Starts a new imGui frame and sets up windows and ui elements
////    void newFrame(initVulkanH *example, bool updateFrameGraph);
//
//    // Update vertex and index buffer containing the imGui elements when required
////    void updateBuffers();
//
//    // Draw current imGui frame into a command buffer
////    void drawFrame(VkCommandBuffer commandBuffer);
////    VkImage texImage;
////    VkDeviceMemory texImageMem;
////    VkImageView texImageView;
////    VkSampler texImageSampler;
////    int index[2];
//    try{
//        windowH window(800,600,"bug test");
//        initVulkanH vulkan(true);
//        vulkan.run(window.getWindow(), deviceExtensions, validationLayers, createGraphicsPipeline, createDescriptorSetLayout);
//        dearGui gui(vulkan,window);
//        std::vector<textureObj> objectsTex;
//        ObjT otherObjects(verticesBack,"textures/backGround.png");
////        {
////            textureCoordCreator(8.f, 8.f, 32.f, 40.f, objectsTex);//tile of texture in pixels
////            createMapFromTmx(map, vulkan.getInfo(), objectsTex, otherObjects, index);
////            createAtlas(vulkan.getDevice(), vulkan.getPhysicalDevice(), texImage, texImageMem, vulkan.getCommandPool(), vulkan.getGraphicsQueue(), "textures/water.png", texImageSampler, texImageView);
////        }
//        otherObjects.createObj(vulkan.getDevice(), vulkan.getPhysicalDevice(), vulkan.getCommandPool(), vulkan.getGraphicsQueue(), 3, vulkan.getInfo(), vulkan.getRenderPass(), vulkan.getSetLayout(), vulkan.getLayout(), vulkan.getPipeline(), vulkan.getAllocator());
//        gui.init_imgui();
////        dearGui.init_imguiNV(window.getWindow(), vulkan);
////        dearGui.init_imguiSpecial(window.getWindow(), vulkan);
//        spinStuff.createObj(vulkan.getDevice(), vulkan.getPhysicalDevice(), vulkan.getCommandPool(), vulkan.getGraphicsQueue(), 3, vulkan.getInfo(), vulkan.getRenderPass(), vulkan.getSetLayout(), vulkan.getLayout(), vulkan.getPipeline(), vulkan.getAllocator());
////        spinStuff.copy(vertices,"textures/texture.jpg");
////        spinStuff.copy(vertices, "textures/texture.jpg");
////        texPosVert(spinStuff.vertices, texObj);
////        beginCommandBuffers(spinStuff, vulkan, vulkan.getCommandBuffers());
//        std::vector<ObjT> objects(2);
//        objects[1] = spinStuff;
//        objects[0] = otherObjects;
////        beginCommandBuffers(spinStuff, vulkan, vulkan.getCommandBuffers(),otherObjects);
//        std::vector<UniformBufferObject> uboh(2);
//        while(!glfwWindowShouldClose(window.getWindow())){
//            double aspectRatio = float(vulkan.getInfo().extent.width)/vulkan.getInfo().extent.height;
//            perspectiveMatrixx = glm::ortho(-aspectRatio, aspectRatio, -1., 1., 1., 10.);
//
////            updateUniformBuffer(spinStuff, imageIndex, 180, vulkan);//not because update was time based
//
////            beginCommandBuffers(spinStuff, vulkan, vulkan.getCommandBuffers());
////            vulkan.drawFrame(window, createGraphicsPipeline, createDescriptorSetLayout, imageIndex, vulkan.getCommandBuffers(), recreate);
////            dearGui.drawGuiNV(window.getWindow(), vulkan);
////            dearGui.drawGuiNV(window.getWindow(), vulkan, spinStuff);
////            dearGui.drawGuiSpecial(vulkan, 0);
////            beginCommandBuffersGui(spinStuff, dearGui.getWd(), dearGui.getCommandBuffer());
////            dearGui.FramePresentNV(vulkan);
////            updateUniformBuffer(objects, imageIndex, 0, vulkan,uboh[0]);
//              updateUniformBuffer(objects, imageIndex, 180, vulkan, uboh[1]);
//              updateUniformBufferMap(uboh[0],vulkan);
//              applyUniformBuffer(objects, imageIndex, vulkan, uboh);
//            
////            gui.drawGui(createGraphicsPipeline, objects, updateUniformBuffer, beginCommandBuffersGui);
////            gui.drawGui(createGraphicsPipeline, objects, beginCommandBuffersGui, uboh);
////            gui.drawGui(createGraphicsPipeline, objects, beginCommandBuffersGui, uboh);// depth testing doens't seem to work check it
//            gui.drawGui(createGraphicsPipeline, objects, beginCommandBuffersGui, uboh, imageIndex);
//            if(recreate == VK_ERROR_OUT_OF_DATE_KHR){
//                std::cout<<"recreate3"<<std::endl;
//                spinStuff.destroyObjForRecreate(vulkan.getDevice(), vulkan.getAllocator());
//                spinStuff.createObjForRecreate(vulkan.getDevice(), vulkan.getPhysicalDevice(), 3, vulkan.getInfo(), vulkan.getRenderPass(), vulkan.getAllocator(), vulkan.getSetLayout(), vulkan.getLayout(), vulkan.getPipeline());
//                otherObjects.destroyObjForRecreate(vulkan.getDevice(), vulkan.getAllocator());
//                otherObjects.createObjForRecreate(vulkan.getDevice(), vulkan.getPhysicalDevice(), 3, vulkan.getInfo(), vulkan.getRenderPass(), vulkan.getAllocator(), vulkan.getSetLayout(), vulkan.getLayout(), vulkan.getPipeline());
//                beginCommandBuffers(spinStuff, vulkan, vulkan.getCommandBuffers(),otherObjects);
//            }
////            glfwSwapInterval(0);
//            glfwSwapBuffers(window.getWindow());
//            glfwPollEvents();
//
//
//            while (glfwGetTime() < lastTime + 1.0/fps) {}
//            lastTime += 1.0/fps;
//        }
////        dearGui.cleanUpNV(vulkan);
////        dearGui.cleanUpSpecial(vulkan);
//        for(int i = 0; i<objects.size(); i++){
//        objects[i].destroyObj(vulkan.getDevice(), vulkan.getAllocator());// hahahahh scared me so much i thought the buffers not found error because of depth buffering recently added, but it is because objects are recreated inside gui app(and so spinstuff starts pointing at nothing)
//        }
////        spinStuff.destroyObj(vulkan.getDevice(), vulkan.getAllocator());
////        otherObjects.destroyObj(vulkan.getDevice(), vulkan.getAllocator());
//        
//        //above phenomenon requires investigation i don't know is it good or bad
//        // ok it's not bad, it just invalidates reference from spinstuff, to fix it i would need to pass new memory references to spinstuff object
//        //result of invalidating reference doesn't cause anything bad, while you don't use invalidated reference
////        destroyAtlas(vulkan.getDevice(), texImage, texImageMem, texImageSampler, texImageView);
//        gui.destroyGui();
//        vulkan.destroy();
//    }catch(const std::exception& e){
//        std::cout<<e.what()<<std::endl;
//        return EXIT_FAILURE;
//    }
//}
//// Important note to the reader who wish to integrate imgui_impl_vulkan.cpp/.h in their own engine/app.
//// - Common ImGui_ImplVulkan_XXX functions and structures are used to interface with imgui_impl_vulkan.cpp/.h.
////   You will use those if you want to use this rendering back-end in your engine/app.
//// - Helper ImGui_ImplVulkanH_XXX functions and structures are only used by this example (main.cpp) and by
////   the back-end itself (imgui_impl_vulkan.cpp), but should PROBABLY NOT be used by your own engine/app code.
//// Read comments in imgui_impl_vulkan.h.
//// Important note to the reader who wish to integrate imgui_impl_vulkan.cpp/.h in their own engine/app.
//// - Common ImGui_ImplVulkan_XXX functions and structures are used to interface with imgui_impl_vulkan.cpp/.h.
////   You will use those if you want to use this rendering back-end in your engine/app.
//// - Helper ImGui_ImplVulkanH_XXX functions and structures are only used by this example (main.cpp) and by
////   the back-end itself (imgui_impl_vulkan.cpp), but should PROBABLY NOT be used by your own engine/app code.
//// Read comments in imgui_impl_vulkan.h.
